<style>
  p{
    margin: 0;
  }
  .toolbar-container{
    width: calc(50.6% - 32px);
    position: fixed;
    margin-top: 32px;
    z-index: 1000; 
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 8px;
    border: 1px solid #DBDBDB;
    padding: 8px 16px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
  }
  .toolbar-type{
    display: flex;
    align-items: center;
    gap: 8px;
  }
  .bi{
    width: 20px;
    height: 20px;
    cursor: pointer;
  }

  .editorjs{
    position: relative;
    background-color: white;
    padding: 32px 42px;
    margin-top: 96px;
    border-radius: 8px;
    border: 1px solid #DBDBDB;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
  }
  .ce-paragraph { /*paragraph block line height*/
    line-height: 1.5;
  }


.question-container {
  margin-bottom: 64px;
  padding: 16px;
  background-color: #CDFAD2;
  border-radius: 8px;
  border: 1px solid #DBDBDB;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

.label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
}

.buttons-container {
  display: flex;
  margin-top: 16px;
  gap: 16px;
}

.button {
  padding: 8px 16px;
  font-size: 14px;
  background: white;
  color: #333;
  border: 1px solid #DBDBDB;
  border-radius: 8px;
  cursor: pointer;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
  transition: box-shadow 0.3s ease;
}

.add-button:hover {
  box-shadow: 0px 2px 10px rgba(0, 255, 0, 0.25);
}

.remove-button:hover {
  box-shadow: 0px 2px 10px rgba(255, 0, 0, 0.25);
}

.option-item {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 8px;
  border-radius: 8px;
}

.radio-circle {
  width: 12px;
  height: 12px;
  border: 1px solid rgb(129, 129, 129);
  border-radius: 99px;
  cursor: pointer;
}

.input-field {
  border: 1px solid #DBDBDB;
  border-radius: 8px;
  outline: none;
  background-color: #E5FDE5;
  width: 100%;
  padding: 8px;
}

.label {
  margin-bottom: 8px;
  font-weight: bold;
  color: #333;
}

.textarea {
  width: calc(100% - 32px);
  background-color: #E5FDE5;
  border: 1px solid #DBDBDB;
  border-radius: 8px;
  margin-bottom: 16px;
  resize: vertical;
  outline: none;
  padding: 16px;
  min-height: 64px;
  font-family: inherit;
  font-size: 14px;
  color: #333;
}

</style>

<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@2.8.1"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@1.9.0"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/code@2.9.0"></script>
<script src="https://cdn.jsdelivr.net/npm/@editorjs/paragraph@2.11.3"></script>
<script>

  // ############ --- MAIN EDITOR --- #############
  let editor; // Macht die Editor-Instanz global verf√ºgbar

  document.addEventListener("DOMContentLoaded", function () {
    const editorElement = document.querySelector(".editorjs");
    const divId = editorElement.id;

    //damit das inputfeld sich mit dem gesavetem content f√ºllt
    const savedContent = JSON.parse(document.getElementById('editorjs').dataset.savedContent);
    
    // Editor-Initialisierung mit vorhandenen Daten
    editor = new EditorJS({
      holder: divId,
      tools: {
        header: Header,
        list: List,
        code: CodeTool,
        paragraph: Paragraph,
        text: Explanation,
        //nestedEditor: NestedEditor,
        singleChoise: SingleChoice,
        multipleChoise: MultipleChoice,
      },
      data: savedContent, // √úbergabe des vorhandenen Inhalts
      autofocus: true
    });
    
    setupAutoSave(editorElement, editor);
  });

  // ########## --- EXPLANATION BLOCK --- ###########

class Explanation {
  static get toolbox() {
    return {
      title: "Textarea",
      icon: "üìù",
    };
  }

  constructor({ data }) {
    this.data = data || { question: "", solution: "" };
    this.wrapper = null;
  }

  render() {
    this.wrapper = document.createElement("div");
    this.wrapper.classList.add("question-container");

    this.renderQuestionSection();
    this.renderSolutionSection();

    return this.wrapper;
  }

  renderQuestionSection() {
    const questionLabel = this.createLabel("Question:");
    this.questionTextarea = this.createTextarea(this.data.question, "textarea");

    this.wrapper.appendChild(questionLabel);
    this.wrapper.appendChild(this.questionTextarea);
  }

  renderSolutionSection() {
    const solutionLabel = this.createLabel("Sample Solution:");
    this.solutionTextarea = this.createTextarea(this.data.solution, "textarea");

    this.wrapper.appendChild(solutionLabel);
    this.wrapper.appendChild(this.solutionTextarea);
  }

  createLabel(text) {
    const label = document.createElement("p");
    label.textContent = text;
    label.classList.add("label");
    return label;
  }

  createTextarea(value, className) {
    const textarea = document.createElement("textarea");
    textarea.value = value;
    textarea.classList.add("textarea", className);
    textarea.setAttribute("spellcheck", "false");
    return textarea;
  }

  save() {
    return {
      question: this.questionTextarea.value,
      solution: this.solutionTextarea.value,
    };
  }
}

// ########### --- Single Choise Block --- ###########

class SingleChoice {
  static get toolbox() {
    return {
      title: "Single Choice Question",
      icon: '<svg width="16" height="16" viewBox="0 0 24 24"><path d="M3 3h18v2H3V3zm0 7h12v2H3v-2zm0 7h18v2H3v-2z"/></svg>',
    };
  }

  constructor({ data }) {
    this.data = data || { 
      question: "",
      options: []
    };
    this.container = null;
    this.questionInput = null;
    this.optionsContainer = null;
  }

  render() {
    this.container = document.createElement("div");
    this.container.classList.add("question-container");

    this.renderQuestionInput();
    this.renderOptionsLabel();
    this.renderOptionsContainer();
    this.renderButtons();

    this.initializeOptions();

    return this.container;
  }

  renderQuestionInput() {
    const questionWrapper = document.createElement("div");
    questionWrapper.classList.add("question-wrapper");

    const questionLabel = this.createLabel("Question:");
    this.questionInput = this.createTextarea(this.data.question);

    questionWrapper.appendChild(questionLabel);
    questionWrapper.appendChild(this.questionInput);
    this.container.appendChild(questionWrapper);
  }

  renderOptionsLabel() {
    const optionsLabel = this.createLabel("Add Options, Click the Correct one");
    this.container.appendChild(optionsLabel);
  }

  renderOptionsContainer() {
    this.optionsContainer = document.createElement("div");
    this.optionsContainer.id = "optionContainer";
    this.container.appendChild(this.optionsContainer);
  }

  renderButtons() {
    const buttonsContainer = document.createElement("div");
    buttonsContainer.classList.add("buttons-container");

    const addButton = this.createButton("+ Option", () => this.createOption(), "add-button");
    const removeButton = this.createButton("- Option", () => this.removeOption(), "remove-button");

    buttonsContainer.appendChild(addButton);
    buttonsContainer.appendChild(removeButton);
    this.container.appendChild(buttonsContainer);
  }

  initializeOptions() {
    if (this.data.options && this.data.options.length > 0) {
      this.data.options.forEach(option => {
        this.createOption(option.text, option.selected);
      });
    } else {
      this.createOption();
    }
  }

  createLabel(text) {
    const label = document.createElement("label");
    label.textContent = text;
    label.classList.add("label");
    return label;
  }

  createTextarea(value = "") {
    const textarea = document.createElement("textarea");
    textarea.classList.add("textarea");
    textarea.value = value;
    return textarea;
  }

  createButton(text, onClick, className) {
    const button = document.createElement("button");
    button.textContent = text;
    button.classList.add("button", className);
    button.addEventListener("click", onClick);
    return button;
  }

  createOption(text = "", selected = false) {
    const newOption = document.createElement("div");
    newOption.classList.add("option-item");

    const radioCircle = this.createRadioCircle(selected);
    const inputField = this.createInputField(text);

    radioCircle.addEventListener("click", () => this.toggleOptionSelection(radioCircle, inputField));

    newOption.appendChild(radioCircle);
    newOption.appendChild(inputField);
    this.optionsContainer.appendChild(newOption);

    inputField.focus();
  }

  createRadioCircle(selected) {
    const radioCircle = document.createElement("div");
    radioCircle.classList.add("radio-circle");
    radioCircle.style.backgroundColor = selected ? "black" : "#FFFFFF";
    return radioCircle;
  }

  createInputField(value) {
    const inputField = document.createElement("input");
    inputField.classList.add("input-field");
    inputField.value = value;
    return inputField;
  }

  toggleOptionSelection(radioCircle, inputField) {
    const isActive = radioCircle.style.backgroundColor === "black";

    this.optionsContainer.querySelectorAll(".option-item .radio-circle").forEach(circle => {
      circle.style.backgroundColor = "#FFFFFF";
    });

    if (!isActive) {
      radioCircle.style.backgroundColor = "black";
    }
  }

  removeOption() {
    const options = this.optionsContainer.querySelectorAll(".option-item");
    if (options.length > 0) {
      this.optionsContainer.removeChild(options[options.length - 1]);
    }
  }

  save() {
    const options = [];
    const optionElements = this.optionsContainer.querySelectorAll(".option-item");

    optionElements.forEach(optionElement => {
      const radioCircle = optionElement.querySelector(".radio-circle");
      const inputField = optionElement.querySelector(".input-field");

      options.push({
        text: inputField.value,
        selected: radioCircle.style.backgroundColor === "black"
      });
    });

    return {
      question: this.questionInput.value,
      options: options
    };
  }
}

// ########## --- MultipleChoise BLOCK --- ###########

class MultipleChoice {
  static get toolbox() {
    return {
      title: "Multiple Choice Question",
      icon: '<svg width="16" height="16" viewBox="0 0 24 24"><path d="M3 3h18v2H3V3zm0 7h12v2H3v-2zm0 7h18v2H3v-2z"/></svg>',
    };
  }

  constructor({ data }) {
    this.data = data || { 
      question: "",
      options: []
    };
    this.container = null;
    this.questionInput = null;
    this.optionsContainer = null;
  }

  render() {
    this.container = document.createElement("div");
    this.container.classList.add("question-container");

    this.renderQuestionInput();
    this.renderOptionsLabel();
    this.renderOptionsContainer();
    this.renderButtons();

    this.initializeOptions();

    return this.container;
  }

  renderQuestionInput() {
    const questionWrapper = document.createElement("div");
    questionWrapper.classList.add("question-wrapper");

    const questionLabel = this.createLabel("Question:");
    this.questionInput = this.createTextarea(this.data.question);

    questionWrapper.appendChild(questionLabel);
    questionWrapper.appendChild(this.questionInput);
    this.container.appendChild(questionWrapper);
  }

  renderOptionsLabel() {
    const optionsLabel = this.createLabel("Add Options, Select the Correct ones");
    this.container.appendChild(optionsLabel);
  }

  renderOptionsContainer() {
    this.optionsContainer = document.createElement("div");
    this.optionsContainer.id = "optionContainer";
    this.container.appendChild(this.optionsContainer);
  }

  renderButtons() {
    const buttonsContainer = document.createElement("div");
    buttonsContainer.classList.add("buttons-container");

    const addButton = this.createButton("+ Option", () => this.createOption(), "add-button");
    const removeButton = this.createButton("- Option", () => this.removeOption(), "remove-button");

    buttonsContainer.appendChild(addButton);
    buttonsContainer.appendChild(removeButton);
    this.container.appendChild(buttonsContainer);
  }

  initializeOptions() {
    if (this.data.options && this.data.options.length > 0) {
      this.data.options.forEach(option => {
        this.createOption(option.text, option.selected);
      });
    } else {
      this.createOption();
    }
  }

  createLabel(text) {
    const label = document.createElement("label");
    label.textContent = text;
    label.classList.add("label");
    return label;
  }

  createTextarea(value = "") {
    const textarea = document.createElement("textarea");
    textarea.classList.add("textarea");
    textarea.value = value;
    return textarea;
  }

  createButton(text, onClick, className) {
    const button = document.createElement("button");
    button.textContent = text;
    button.classList.add("button", className);
    button.addEventListener("click", onClick);
    return button;
  }

  createOption(text = "", selected = false) {
    const newOption = document.createElement("div");
    newOption.classList.add("option-item");

    const checkbox = this.createCheckbox(selected);
    const inputField = this.createInputField(text);

    checkbox.addEventListener("change", () => this.toggleOptionSelection(checkbox, inputField));

    newOption.appendChild(checkbox);
    newOption.appendChild(inputField);
    this.optionsContainer.appendChild(newOption);

    inputField.focus();

  }

  createCheckbox(selected) {
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.classList.add("checkbox");
    checkbox.checked = selected;
    return checkbox;
  }

  createInputField(value) {
    const inputField = document.createElement("input");
    inputField.classList.add("input-field");
    inputField.value = value;
    return inputField;
  }

  toggleOptionSelection(checkbox, inputField) {
    if (checkbox.checked) {
    } else {
      inputField.style.boxShadow = "none";
    }
  }

  removeOption() {
    const options = this.optionsContainer.querySelectorAll(".option-item");
    if (options.length > 0) {
      this.optionsContainer.removeChild(options[options.length - 1]);
    }
  }

  save() {
    const options = [];
    const optionElements = this.optionsContainer.querySelectorAll(".option-item");

    optionElements.forEach(optionElement => {
      const checkbox = optionElement.querySelector(".checkbox");
      const inputField = optionElement.querySelector(".input-field");

      options.push({
        text: inputField.value,
        selected: checkbox.checked
      });
    });

    return {
      question: this.questionInput.value,
      options: options
    };
  }
}

// ########## --- NESTEDEDITOR BLOCK --- ###########

//  class NestedEditor {
//   static get toolbox() {
//     return {
//       title: 'Nested Editor',
//       icon: '<svg width="16" height="16" viewBox="0 0 24 24"><path d="M3 3h18v2H3V3zm0 7h12v2H3v-2zm0 7h18v2H3v-2z"/></svg>'
//     };
//   }

//   constructor({ data, api, config }) {
//     this.api = api;
//     this.data = data || {};
//     this.config = config || {};
//     this.wrapper = null;
//   }

//   render() {
//     this.wrapper = document.createElement('div');
//     this.wrapper.classList.add('nested-editor-wrapper');

//     this.editorContainer = document.createElement('div');
//     this.wrapper.appendChild(this.editorContainer);
//     this.wrapper.style.backgroundColor = '#DFF8F9';
//     this.wrapper.style.padding = '16px';
//     this.wrapper.style.margin= '16px';
//     //here you can add custom blocks etc
//     this.nestedEditor = new EditorJS({
//       holder: this.editorContainer,
//       data: this.data.nestedEditorData || {},
//       tools: {
//         explanation: Explanation,
//         ...this.config.tools
//       },
//     });

//     return this.wrapper;
//   }

//   save() {
//     return new Promise((resolve) => {
//       this.nestedEditor.save().then((nestedData) => {
//         resolve({ nestedEditorData: nestedData });
//       });
//     });
//   }
// }   
  
</script>



<%= javascript_include_tag "autosave" %>

<div id="<%= dom_id note %>">
    <div class="toolbar-container">
      <div class="toolbar-type">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-h1" viewBox="0 0 16 16">
          <path d="M7.648 13V3H6.3v4.234H1.348V3H0v10h1.348V8.421H6.3V13zM14 13V3h-1.333l-2.381 1.766V6.12L12.6 4.443h.066V13z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-h2" viewBox="0 0 16 16">
          <path d="M7.495 13V3.201H6.174v4.15H1.32V3.2H0V13h1.32V8.513h4.854V13zm3.174-7.071v-.05c0-.934.66-1.752 1.801-1.752 1.005 0 1.76.639 1.76 1.651 0 .898-.582 1.58-1.12 2.19l-3.69 4.2V13h6.331v-1.149h-4.458v-.079L13.9 8.786c.919-1.048 1.666-1.874 1.666-3.101C15.565 4.149 14.35 3 12.499 3 10.46 3 9.384 4.393 9.384 5.879v.05z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-highlighter" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M11.096.644a2 2 0 0 1 2.791.036l1.433 1.433a2 2 0 0 1 .035 2.791l-.413.435-8.07 8.995a.5.5 0 0 1-.372.166h-3a.5.5 0 0 1-.234-.058l-.412.412A.5.5 0 0 1 2.5 15h-2a.5.5 0 0 1-.354-.854l1.412-1.412A.5.5 0 0 1 1.5 12.5v-3a.5.5 0 0 1 .166-.372l8.995-8.07zm-.115 1.47L2.727 9.52l3.753 3.753 7.406-8.254zm3.585 2.17.064-.068a1 1 0 0 0-.017-1.396L13.18 1.387a1 1 0 0 0-1.396-.018l-.068.065zM5.293 13.5 2.5 10.707v1.586L3.707 13.5z"/>
        </svg>
      </div>
      
      <div class="toolbar-type">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-bold" viewBox="0 0 16 16">
          <path d="M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-italic" viewBox="0 0 16 16">
          <path d="M7.991 11.674 9.53 4.455c.123-.595.246-.71 1.347-.807l.11-.52H7.211l-.11.52c1.06.096 1.128.212 1.005.807L6.57 11.674c-.123.595-.246.71-1.346.806l-.11.52h3.774l.11-.52c-1.06-.095-1.129-.211-1.006-.806z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-underline" viewBox="0 0 16 16">
          <path d="M5.313 3.136h-1.23V9.54c0 2.105 1.47 3.623 3.917 3.623s3.917-1.518 3.917-3.623V3.136h-1.23v6.323c0 1.49-.978 2.57-2.687 2.57s-2.687-1.08-2.687-2.57zM12.5 15h-9v-1h9z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-type-strikethrough" viewBox="0 0 16 16">
          <path d="M6.333 5.686c0 .31.083.581.27.814H5.166a2.8 2.8 0 0 1-.099-.76c0-1.627 1.436-2.768 3.48-2.768 1.969 0 3.39 1.175 3.445 2.85h-1.23c-.11-1.08-.964-1.743-2.25-1.743-1.23 0-2.18.602-2.18 1.607zm2.194 7.478c-2.153 0-3.589-1.107-3.705-2.81h1.23c.144 1.06 1.129 1.703 2.544 1.703 1.34 0 2.31-.705 2.31-1.675 0-.827-.547-1.374-1.914-1.675L8.046 8.5H1v-1h14v1h-3.504c.468.437.675.994.675 1.697 0 1.826-1.436 2.967-3.644 2.967"/>
        </svg>
      </div>

      <div class="toolbar-type">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ol" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5"/>
          <path d="M1.713 11.865v-.474H2c.217 0 .363-.137.363-.317 0-.185-.158-.31-.361-.31-.223 0-.367.152-.373.31h-.59c.016-.467.373-.787.986-.787.588-.002.954.291.957.703a.595.595 0 0 1-.492.594v.033a.615.615 0 0 1 .569.631c.003.533-.502.8-1.051.8-.656 0-1-.37-1.008-.794h.582c.008.178.186.306.422.309.254 0 .424-.145.422-.35-.002-.195-.155-.348-.414-.348h-.3zm-.004-4.699h-.604v-.035c0-.408.295-.844.958-.844.583 0 .96.326.96.756 0 .389-.257.617-.476.848l-.537.572v.03h1.054V9H1.143v-.395l.957-.99c.138-.142.293-.304.293-.508 0-.18-.147-.32-.342-.32a.33.33 0 0 0-.342.338zM2.564 5h-.635V2.924h-.031l-.598.42v-.567l.629-.443h.635z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ul" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-code-slash" viewBox="0 0 16 16">
          <path d="M10.478 1.647a.5.5 0 1 0-.956-.294l-4 13a.5.5 0 0 0 .956.294zM4.854 4.146a.5.5 0 0 1 0 .708L1.707 8l3.147 3.146a.5.5 0 0 1-.708.708l-3.5-3.5a.5.5 0 0 1 0-.708l3.5-3.5a.5.5 0 0 1 .708 0m6.292 0a.5.5 0 0 0 0 .708L14.293 8l-3.147 3.146a.5.5 0 0 0 .708.708l3.5-3.5a.5.5 0 0 0 0-.708l-3.5-3.5a.5.5 0 0 0-.708 0"/>
        </svg>
      </div>

      <div class="toolbar-type">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-share" viewBox="0 0 16 16">
          <path d="M13.5 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.5 2.5 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5m-8.5 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m11 5.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
          <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
          <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"/>
        </svg>
      </div>
    </div>

  <div id="editorjs" class="editorjs" 
       data-instance-of-table-id="<%= @note.id %>" 
       data-table-name="note"
       data-autosave-interval="3000"
       data-saved-content="<%= @note.content.to_json %>">
  </div>   
 
</div>  
