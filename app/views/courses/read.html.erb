
<style>
  :root {
    /* Farbvariablen */
    --primary-color: #00ff99;
    --dark-color: #000000;
    --white-color: #ffffff;
    --light-gray: #e6e4e4;
    --medium-gray: #c9c9c9;
    --dark-gray: #444343;
    --footer-bg: rgb(32, 31, 36);
    --footer-copyright-bg: rgb(19, 19, 19);
    
    /* Abstands-System */
    --space-xs: 4px;
    --space-sm: 8px;
    --space-md: 16px;
    --space-lg: 24px;
    --space-xl: 32px;
    --space-xxl: 48px;
    --space-3xl: 64px;
    
    /* Größen-System */
    --button-height: 48px;
    --card-border: 4px;
    --image-border: 12px;

    /* Font Größen*/
    --font-sm: 1rem;
    --font-md: 1.5rem;
    --font-xl: 2rem;
  }
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  
  .note-container{
    padding: 0 25%;
  }
  .question-element{
    background-color: #DBDBDB;
    padding: 20px;
    border: 1px solid black; 
  }

  h1 {
      color: #2c3e50;
      text-align: center;
      margin-bottom: 30px;
  }
  .question-container {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      padding: 20px;
      margin-bottom: 25px;
  }
  .question-title {
      font-weight: bold;
      margin-bottom: 15px;
      color: #2c3e50;
  }
  .question-text {
      margin-bottom: 15px;
      line-height: 1.5;
  }
  .options-container {
      margin-left: 10px;
      margin-bottom: 16px;
  }
  .option {
      margin-bottom: 10px;
      display: flex;
      align-items: center;
  }
  .option input {
      margin-right: 10px;
  }
  .option label {
      cursor: pointer;
  }
  .submit-btn {
      background-color: #3498db;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 4px;
      cursor: pointer;
      display: block;
      margin: 30px auto 0;
      transition: background-color 0.3s;
  }
  .submit-btn:hover {
      background-color: #2980b9;
  }
  .question-type {
      font-size: 0.8em;
      color: #7f8c8d;
      margin-bottom: 5px;
  }
  .latest-button-container {
  display: flex;
  width: 25%;
  align-items: center;
  height: var(--button-height);
  cursor: pointer;
}

.latest-button {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--primary-color);
  color: var(--dark-color);
  text-decoration: none;
  border: none;
  width: 100%;
  height: 100%;
  transition: .3s;
}

.arrow {
  width: 20px;
  height: 20px;
  fill: var(--white-color);
}

.arrow-container {
  background-color: var(--dark-color);
  width: 30px;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: 0.3s ease;

}

.latest-button-container:hover .latest-button {
  background-color: var(--dark-color);
  color: var(--white-color);
}

.latest-button-container:hover .arrow {
  fill: var(--dark-color);
  stroke: var(--dark-color);
}

.latest-button-container:hover .arrow-container {
  background-color: var(--primary-color);
}

.latest-button-container:active {
  box-shadow: 0 2px 10px 0 rgba(0, 0, 0, .5);
}

.explanation-area{
  width: 100%; height: 256px; margin-bottom: 16px;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {

    function createShowButton() {
      const buttonContainer = document.createElement('div');
      buttonContainer.className = 'latest-button-container';
      
      const button = document.createElement('div');
      button.className = 'latest-button';
      button.textContent = 'SHOW ANSWER';
      button.dataset.state = 'hidden'; // Track button state: hidden or shown
      
      // Add click event listener to toggle answers
      button.addEventListener('click', function(e) {
        const questionContainer = this.closest('.question-container');
        if (questionContainer) {
          const state = this.dataset.state;
          
          if (state === 'hidden') {
            showAnswer(questionContainer);
            this.textContent = 'HIDE ANSWER';
            this.dataset.state = 'shown';
          } else {
            hideAnswer(questionContainer);
            this.textContent = 'SHOW ANSWER';
            this.dataset.state = 'hidden';
          }
        }
      });
      
      buttonContainer.appendChild(button);
      
      const arrowContainer = document.createElement('div');
      arrowContainer.className = 'arrow-container';
      
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
      svg.setAttribute('width', '16');
      svg.setAttribute('height', '16');
      svg.setAttribute('fill', 'white');
      svg.setAttribute('stroke', 'white');
      svg.setAttribute('class', 'arrow');
      svg.setAttribute('viewBox', '0 0 16 16');
      
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('fill-rule', 'evenodd');
      path.setAttribute('d', 'M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708');
      svg.appendChild(path);
      
      arrowContainer.appendChild(svg);
      buttonContainer.appendChild(arrowContainer);
      
      return buttonContainer;
    }
    
    // Function to show answers when button is clicked
    function showAnswer(questionContainer) {
      const questionType = questionContainer.querySelector('.question-type').textContent;
      
      if (questionType === 'Single-Choice') {
        // Get the block ID to find the corresponding data
        const blockId = questionContainer.dataset.blockId;
        
        // Find the corresponding block data
        const blockData = findBlockDataById(blockId);
        if (!blockData) return;
        
        // Mark correct and incorrect answers
        const options = questionContainer.querySelectorAll('.option');
        
        options.forEach((option, index) => {
          const input = option.querySelector('input');
          const label = option.querySelector('label');
          const isCorrect = blockData.data.options[index].selected;
          
          // Store original state for hiding later
          if (!option.dataset.originalState) {
            option.dataset.originalState = JSON.stringify({
              checked: input.checked,
              disabled: input.disabled
            });
          }
          
          // Mark as correct or incorrect
          if (isCorrect) {
            label.classList.add('correct-answer');
            if (!label.querySelector('.check-mark')) {
              label.insertAdjacentHTML('beforeend', ' <span class="check-mark">✓</span>');
            }
          } else if (input.checked && !isCorrect) {
            label.classList.add('incorrect-answer');
            if (!label.querySelector('.x-mark')) {
              label.insertAdjacentHTML('beforeend', ' <span class="x-mark">✗</span>');
            }
          }
          
          // Disable inputs after showing answer
          input.disabled = true;
        });
        
        // Add a class to the container to mark it as showing answers
        questionContainer.classList.add('showing-answers');
      } 
      else if (questionType === 'Explanation') {
        // Get the block ID to find the corresponding data
        const blockId = questionContainer.dataset.blockId;
        
        // Find the corresponding block data
        const blockData = findBlockDataById(blockId);
        if (!blockData) return;
        
        // Save the current textarea content if it doesn't exist yet
        const textarea = questionContainer.querySelector('.explanation-area');
        if (textarea && !textarea.dataset.savedContent) {
          textarea.dataset.savedContent = textarea.value;
        }
        
        // Show the solution
        let solutionDiv = questionContainer.querySelector('.solution-container');
        if (!solutionDiv) {
          solutionDiv = document.createElement('div');
          solutionDiv.className = 'solution-container';
          solutionDiv.innerHTML = `
            <h4>Solution:</h4>
            <div class="solution-text">${blockData.data.solution}</div>
          `;
          
          // Replace textarea with solution or add solution below
          if (textarea) {
            textarea.style.display = 'none';
            questionContainer.insertBefore(solutionDiv, textarea.nextSibling);
          } else {
            questionContainer.appendChild(solutionDiv);
          }
        } else {
          // If solution exists but was hidden, show it
          solutionDiv.style.display = '';
          if (textarea) {
            textarea.style.display = 'none';
          }
        }
        
        // Add a class to the container to mark it as showing answers
        questionContainer.classList.add('showing-answers');
      }
    }
    
    // Function to hide answers
    function hideAnswer(questionContainer) {
      const questionType = questionContainer.querySelector('.question-type').textContent;
      
      if (questionType === 'Single-Choice') {
        // Restore original state of options
        const options = questionContainer.querySelectorAll('.option');
        
        options.forEach(option => {
          const input = option.querySelector('input');
          const label = option.querySelector('label');
          
          // Remove answer markings
          label.classList.remove('correct-answer', 'incorrect-answer');
          
          // Remove check/x marks
          const checkMark = label.querySelector('.check-mark');
          if (checkMark) {
            checkMark.remove();
          }
          
          const xMark = label.querySelector('.x-mark');
          if (xMark) {
            xMark.remove();
          }
          
          // Restore original state
          if (option.dataset.originalState) {
            const originalState = JSON.parse(option.dataset.originalState);
            input.checked = originalState.checked;
            input.disabled = originalState.disabled;
          }
        });
        
        // Remove the showing-answers class
        questionContainer.classList.remove('showing-answers');
      } 
      else if (questionType === 'Explanation') {
        // Hide solution
        const solutionDiv = questionContainer.querySelector('.solution-container');
        if (solutionDiv) {
          solutionDiv.style.display = 'none';
        }
        
        // Show textarea
        const textarea = questionContainer.querySelector('.explanation-area');
        if (textarea) {
          textarea.style.display = '';
          
          // Restore saved content if it exists
          if (textarea.dataset.savedContent) {
            textarea.value = textarea.dataset.savedContent;
          }
        }
        
        // Remove the showing-answers class
        questionContainer.classList.remove('showing-answers');
      }
    }
    
    // Helper function to find block data by ID
    function findBlockDataById(blockId) {
      if (!window.noteData || !window.noteData.blocks) return null;
      
      return window.noteData.blocks.find(block => block.id === blockId);
    }
    
    try {
      // Get the note content from a data attribute that we'll create in the HTML
      const noteContent = document.getElementById('note-content-data').textContent;
      const noteData = JSON.parse(noteContent);
      
      // Store noteData globally to access it when showing answers
      window.noteData = noteData;
      
      // Function to render the note content
      function renderNote(data) {
        const contentElement = document.getElementById('note-content');
        const timestampElement = document.getElementById('note-timestamp');
        
        // Render blocks
        data.blocks.forEach(block => {
          const blockElement = renderBlock(block);
          if (blockElement) {
            contentElement.appendChild(blockElement);
          }
        });
      }
      
      // Function to render individual blocks
      function renderBlock(block) {
        switch(block.type) {
          case 'header':
            const header = document.createElement(`h${block.data.level}`);
            header.innerHTML = block.data.text;
            return header;
            
          case 'paragraph':
            const paragraph = document.createElement('p');
            paragraph.innerHTML = block.data.text;
            return paragraph;
            
          case 'alert':
            const alert = document.createElement('div');
            alert.className = `alert alert-${block.data.type}`;
            alert.textContent = block.data.message;
            return alert;
            
          case 'list':
            if (block.data.style === 'checklist') {
              const list = document.createElement('ul');
              list.className = 'checklist';
              
              block.data.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'checklist-item';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = item.meta.checked;
                checkbox.disabled = true;
                
                const label = document.createElement('span');
                label.innerHTML = item.content;
                
                listItem.appendChild(checkbox);
                listItem.appendChild(label);
                list.appendChild(listItem);
              });
              
              return list;
            } else {
              const list = document.createElement(block.data.style === 'ordered' ? 'ol' : 'ul');
              
              block.data.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.innerHTML = item.content;
                list.appendChild(listItem);
              });
              
              return list;
            }
            
          case 'table':
            const table = document.createElement('table');
            
            block.data.content.forEach((row, rowIndex) => {
              const tr = document.createElement('tr');
              
              row.forEach((cell, cellIndex) => {
                const cellElement = document.createElement(
                  block.data.withHeadings && rowIndex === 0 ? 'th' : 'td'
                );
                cellElement.textContent = cell;
                tr.appendChild(cellElement);
              });
              
              table.appendChild(tr);
            });
            
            return table;
          
          case 'multipleChoise':
            const multipleChoise = document.createElement('div');
            multipleChoise.className = 'question-container';
            multipleChoise.dataset.blockId = block.id; // Store block ID for later reference
            
            // Frage-Typ hinzufügen
            const questionType = document.createElement('div');
            questionType.className = 'question-type';
            questionType.textContent = 'Single-Choice';
            multipleChoise.appendChild(questionType);
            
            // Frage-Titel hinzufügen
            const questionTitle = document.createElement('div');
            questionTitle.className = 'question-title';
            questionTitle.textContent = 'Frage 1';
            multipleChoise.appendChild(questionTitle);
            
            // Fragetext hinzufügen
            const questionText = document.createElement('div');
            questionText.className = 'question-text';
            questionText.textContent = block.data.question;
            multipleChoise.appendChild(questionText);
            
            // Optionen-Container erstellen
            const optionsContainer = document.createElement('div');
            optionsContainer.className = 'options-container';
            const options = block.data.options.map((option, index) => {
              return {
                id: `q1-opt${index+1}`, 
                value: option.text.toLowerCase().replace(/\s+/g, '-'),
                label: option.text
              };
            });
            
            options.forEach(option => {
              const optionDiv = document.createElement('div');
              optionDiv.className = 'option';
              
              const input = document.createElement('input');
              input.type = 'checkbox';
              input.id = option.id;
              input.name = 'question1';
              input.value = option.value;
              
              const label = document.createElement('label');
              label.setAttribute('for', option.id);
              label.textContent = option.label;
              
              optionDiv.appendChild(input);
              optionDiv.appendChild(label);
              optionsContainer.appendChild(optionDiv);
            });
            
            multipleChoise.appendChild(optionsContainer);
            
            // Button-Container hinzufügen
            multipleChoise.appendChild(createShowButton());

            return multipleChoise;
          
          case 'explanation':
            const explanation = document.createElement('div');
            explanation.className = 'question-container';
            explanation.dataset.blockId = block.id; // Store block ID for later reference
            
            // Frage-Typ hinzufügen
            const questionTypeExplanation = document.createElement('div');
            questionTypeExplanation.className = 'question-type';
            questionTypeExplanation.textContent = 'Explanation';
            explanation.appendChild(questionTypeExplanation);
            
            // Frage-Titel hinzufügen
            const questionTitleExplanation = document.createElement('div');
            questionTitleExplanation.className = 'question-title';
            questionTitleExplanation.textContent = 'Frage 1';
            explanation.appendChild(questionTitleExplanation);
            
            // Fragetext hinzufügen
            const questionTextExplanation = document.createElement('div');
            questionTextExplanation.className = 'question-text';
            questionTextExplanation.textContent = block.data.question;
            explanation.appendChild(questionTextExplanation);

            const explanationArea = document.createElement('textarea');
            explanationArea.className = "explanation-area";
            explanation.appendChild(explanationArea);
            
            // Button-Container hinzufügen
            explanation.appendChild(createShowButton());
            return explanation;

          default:
            console.warn(`Unsupported block type: ${block.type}`);
            return null;
        }
      }
      
      // Initialize with the data
      renderNote(noteData);
      
      // Add CSS styles for correct and incorrect answers
      const styleSheet = document.createElement("style");
      styleSheet.textContent = `
        .correct-answer {
          color: green;
          font-weight: bold;
        }
        .incorrect-answer {
          color: red;
          text-decoration: line-through;
        }
        .check-mark {
          color: green;
          font-weight: bold;
        }
        .x-mark {
          color: red;
          font-weight: bold;
        }
        .solution-container {
          margin-top: 15px;
          padding: 10px;
          background-color: #f5f5f5;
          border-radius: 5px;
          border-left: 4px solid #4CAF50;
        }
        .solution-text {
          padding: 5px;
        }
      `;
      document.head.appendChild(styleSheet);
      
    } catch (error) {
      console.error("Error processing note data:", error);
      document.getElementById('note-content').innerHTML = '<p>Error loading note content. Please try again later.</p>';
    }
});
</script>

<div id="note-content-data" style="display: none;">
  <%= @course.note.content.to_json.html_safe %>
</div>

<div class="note-container">
  <div id="note-content"></div>   
</div>

