<!-- app/views/courses/show.html.erb or wherever you're displaying the note -->

<div class="note-container">
  <div id="note-content"></div>
  <div id="note-timestamp" class="note-timestamp"></div>
</div>

<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 1.6;
    color: #333;
  }
  
  .note-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  h1 {
    font-size: 2.5rem;
    color: #2c3e50;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.5rem;
  }
  
  h2 {
    font-size: 2rem;
    color: #3498db;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  p {
    margin-bottom: 1rem;
  }
  
  ul, ol {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }
  
  ul.checklist {
    list-style-type: none;
    padding-left: 0.5rem;
  }
  
  .checklist-item {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .checklist-item input[type="checkbox"] {
    margin-right: 0.75rem;
  }
  
  .alert {
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1rem;
  }
  
  .alert-primary {
    background-color: #d4edff;
    border-left: 4px solid #3498db;
    color: #0c5460;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1.5rem;
  }
  
  th, td {
    padding: 0.75rem;
    border: 1px solid #dee2e6;
    text-align: left;
  }
  
  th {
    background-color: #f8f9fa;
  }
  
  tr:nth-child(even) {
    background-color: #f8f9fa;
  }
  
  .note-timestamp {
    font-size: 0.8rem;
    color: #6c757d;
    margin-bottom: 1.5rem;
    text-align: right;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    try {
      // Get the note content from a data attribute that we'll create in the HTML
      const noteContent = document.getElementById('note-content-data').textContent;
      const noteData = JSON.parse(noteContent);
      
      // Function to format timestamp
      function formatTimestamp(timestamp) {
        const date = new Date(timestamp);
        return `Last updated: ${date.toLocaleString()}`;
      }
      
      // Function to render the note content
      function renderNote(data) {
        const contentElement = document.getElementById('note-content');
        const timestampElement = document.getElementById('note-timestamp');
        
        // Set timestamp
        if (data.time) {
          timestampElement.textContent = formatTimestamp(data.time);
        }
        
        // Render blocks
        data.blocks.forEach(block => {
          const blockElement = renderBlock(block);
          if (blockElement) {
            contentElement.appendChild(blockElement);
          }
        });
      }
      
      // Function to render individual blocks
      function renderBlock(block) {
        switch(block.type) {
          case 'header':
            const header = document.createElement(`h${block.data.level}`);
            header.innerHTML = block.data.text;
            return header;
            
          case 'paragraph':
            const paragraph = document.createElement('p');
            paragraph.innerHTML = block.data.text;
            return paragraph;
            
          case 'alert':
            const alert = document.createElement('div');
            alert.className = `alert alert-${block.data.type}`;
            alert.textContent = block.data.message;
            return alert;
            
          case 'list':
            if (block.data.style === 'checklist') {
              const list = document.createElement('ul');
              list.className = 'checklist';
              
              block.data.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'checklist-item';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = item.meta.checked;
                checkbox.disabled = true;
                
                const label = document.createElement('span');
                label.innerHTML = item.content;
                
                listItem.appendChild(checkbox);
                listItem.appendChild(label);
                list.appendChild(listItem);
              });
              
              return list;
            } else {
              const list = document.createElement(block.data.style === 'ordered' ? 'ol' : 'ul');
              
              block.data.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.innerHTML = item.content;
                list.appendChild(listItem);
              });
              
              return list;
            }
            
          case 'table':
            const table = document.createElement('table');
            
            block.data.content.forEach((row, rowIndex) => {
              const tr = document.createElement('tr');
              
              row.forEach((cell, cellIndex) => {
                const cellElement = document.createElement(
                  block.data.withHeadings && rowIndex === 0 ? 'th' : 'td'
                );
                cellElement.textContent = cell;
                tr.appendChild(cellElement);
              });
              
              table.appendChild(tr);
            });
            
            return table;
            
          default:
            console.warn(`Unsupported block type: ${block.type}`);
            return null;
        }
      }
      
      // Initialize with the data
      renderNote(noteData);
    } catch (error) {
      console.error("Error processing note data:", error);
      document.getElementById('note-content').innerHTML = '<p>Error loading note content. Please try again later.</p>';
    }
  });
</script>

<!-- Hidden div to store the JSON data -->
<div id="note-content-data" style="display: none;">
  <%= @course.note.content.to_json.html_safe %>
</div>